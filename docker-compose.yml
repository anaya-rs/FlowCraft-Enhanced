version: '3.8'

services:
  # FlowCraft AI Backend
  flowcraft-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: flowcraft-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=production
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      - DATABASE_URL=postgresql://flowcraft:flowcraft123@postgres:5432/flowcraft
      - SECRET_KEY=your-super-secret-key-change-this-in-production
      - JWT_SECRET_KEY=your-jwt-secret-key-change-this-in-production
      - CORS_ORIGINS=https://yourdomain.com
      - ALLOW_CREDENTIALS=true
    volumes:
      - flowcraft-uploads:/app/uploads
      - flowcraft-exports:/app/exports
      - flowcraft-logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - flowcraft-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FlowCraft AI Frontend
  flowcraft-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: flowcraft-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=http://localhost:8000
    depends_on:
      - flowcraft-backend
    networks:
      - flowcraft-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: flowcraft-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=flowcraft
      - POSTGRES_USER=flowcraft
      - POSTGRES_PASSWORD=flowcraft123
    volumes:
      - flowcraft-postgres:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - flowcraft-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flowcraft -d flowcraft"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: flowcraft-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - flowcraft-redis:/data
    networks:
      - flowcraft-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: flowcraft-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - flowcraft-uploads:/var/www/uploads:ro
    depends_on:
      - flowcraft-backend
      - flowcraft-frontend
    networks:
      - flowcraft-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama AI Service (Optional)
  ollama:
    image: ollama/ollama:latest
    container_name: flowcraft-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - flowcraft-ollama:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - flowcraft-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

volumes:
  flowcraft-postgres:
    driver: local
  flowcraft-redis:
    driver: local
  flowcraft-uploads:
    driver: local
  flowcraft-exports:
    driver: local
  flowcraft-logs:
    driver: local
  flowcraft-ollama:
    driver: local

networks:
  flowcraft-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# DEPLOYMENT COMMANDS
# =============================================================================

# Start all services
# docker-compose up -d

# Start specific services
# docker-compose up -d flowcraft-backend flowcraft-frontend

# View logs
# docker-compose logs -f flowcraft-backend

# Stop all services
# docker-compose down

# Stop and remove volumes
# docker-compose down -v

# Rebuild and restart
# docker-compose up -d --build

# Scale backend instances
# docker-compose up -d --scale flowcraft-backend=3
